#ifndef DB_MANAGER_H
#define DB_MANAGER_H

////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#ifndef DB_COMPONENT_H
#	include "db_component.h"
#endif
#ifndef DB_CONNECTION_STARTER_H
#	include "db_connectionstarter.h"
#endif

// Qt includes

// STD Includes

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace fm {
////////////////////////////////////////////////////////////////////////////////
namespace db {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CDBManager
//
class CDBManager
{
public:// Types

public:// Constructors
	inline CDBManager();
	virtual ~CDBManager() = default;

public:// Interface Methodes
	void Initialize(QString const& strDBFilePath = "");
	inline std::shared_ptr<IDBComponent> GetDBComponent(QString const& strComponentName);
	inline QSqlDatabase& GetDataBase();

protected:// Helper Methodes
	bool SetDBComponent(std::shared_ptr<IDBComponent> pDBComponent, QString const& strComponentName, bool bInitialize = true);

private:// Members
	std::map< QString, std::shared_ptr<IDBComponent> > m_mapStringToComponent;
	std::shared_ptr<CDBConnectionStarter> m_pDBConnectionStarter;
};
////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////
//
// class CDBManager
//

// Constructor
inline CDBManager::CDBManager()
	: m_pDBConnectionStarter(new CDBConnectionStarter()),
	  m_mapStringToComponent()
{};

// Interface Methodes
inline std::shared_ptr<IDBComponent> CDBManager::GetDBComponent(QString const& strComponentName)
{
	auto itMap = m_mapStringToComponent.find(strComponentName);
	if (itMap == m_mapStringToComponent.end())
		return nullptr;

	return itMap->second;
}

inline QSqlDatabase& CDBManager::GetDataBase()
{
	return m_pDBConnectionStarter->GetDataBase();
}

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace db
////////////////////////////////////////////////////////////////////////////////
} // namespace fm
////////////////////////////////////////////////////////////////////////////////

#endif // DB_MANAGER_H