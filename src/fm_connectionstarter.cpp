////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "fm_connectionstarter.h"

// Qt includes
#include <QDesktopServices>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace fm {
////////////////////////////////////////////////////////////////////////////////
namespace db {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CConnectionStarter
//

const QString CConnectionStarter::m_cstrDataFilePath = QLatin1String("data/");
const QString CConnectionStarter::m_cstrDataFileName = QLatin1String("data.sqlite");

// Interface Methodes
void CConnectionStarter::StartConnection()
{
	QDir dirDataFile;
	if (m_strFilePath == "")
		m_strFilePath = m_cstrDataFilePath + m_cstrDataFileName;

	if (!dirDataFile.exists(m_strFilePath))
	{
		if (!dirDataFile.mkpath(m_cstrDataFilePath))
			throw CException(qtr("Unable to create path"));
	}

	// Create SQlite connection
	m_sqlDataBase = QSqlDatabase::addDatabase("QSQLITE");
	m_sqlDataBase.setDatabaseName(m_strFilePath);
	if (!m_sqlDataBase.open())
	{
		QString sErrMsg = m_sqlDataBase.lastError().driverText();
		throw CException(qtr("Unable to establish database connection: ").append(sErrMsg));
	}
}
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace db
////////////////////////////////////////////////////////////////////////////////
} // namespace fm
////////////////////////////////////////////////////////////////////////////////