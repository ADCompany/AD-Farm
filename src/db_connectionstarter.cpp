////////////////////////////////////////////////////////////////////////////////
//
// Includes
//
#include "db_connectionstarter.h"

// Qt includes
#include <QDesktopServices>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
namespace fm {
////////////////////////////////////////////////////////////////////////////////
namespace db {
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// class CDBConnectionStarter
//

const QString CDBConnectionStarter::m_cstrDataFilePath = QLatin1String("data/");
const QString CDBConnectionStarter::m_cstrDataFileName = QLatin1String("data.sqlite");

// Interface Methodes
void CDBConnectionStarter::StartConnection(QString strDBFilePath)
{
	if (m_bStartConnection)
		return;

	if (strDBFilePath != "")
		m_strDBFilePath = strDBFilePath;

	if (m_strDBFilePath == "")
		m_strDBFilePath = m_cstrDataFilePath + m_cstrDataFileName;

	QDir dirDataFile;
	if (!dirDataFile.exists(m_strDBFilePath))
	{
		if (!dirDataFile.mkpath(m_cstrDataFilePath))
			throw CException(qtr("Unable to create path"));
	}

	// Create SQlite connection
	m_sqlDataBase = QSqlDatabase::addDatabase("QSQLITE");
	m_sqlDataBase.setDatabaseName(m_strDBFilePath);
	if (!m_sqlDataBase.open())
	{
		QString sErrMsg = m_sqlDataBase.lastError().driverText();
		throw CException(qtr("Unable to establish database connection: ").append(sErrMsg));
	}

	m_bStartConnection = true;
}
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
} // namespace db
////////////////////////////////////////////////////////////////////////////////
} // namespace fm
////////////////////////////////////////////////////////////////////////////////